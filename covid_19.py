# -*- coding: utf-8 -*-
"""Covid -19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t3n4QmybcIh4jwGg2EsN7_QTbSL_Y7D6
"""

# COVID-19 Socioeconomic and Healthcare Response Dashboard

## Dataset Preparation
# Simulated data combining COVID-19 metrics, socioeconomic data, and healthcare capacity
import pandas as pd
import numpy as np

# Generate synthetic COVID-19 case data
countries = ['USA', 'India', 'Brazil', 'Russia', 'UK']
population = [331000000, 1380000000, 213000000, 146000000, 68000000]
gdp = [21137518, 2875142, 1444735, 1483495, 2827112]  # GDP in billions
icu_beds_per_100k = [34.7, 2.3, 8.6, 13.1, 6.6]
vaccination_rate = [65, 55, 78, 60, 85]  # % population fully vaccinated

data = {
    'Country': countries,
    'Population': population,
    'GDP (Billion USD)': gdp,
    'ICU Beds per 100k': icu_beds_per_100k,
    'Vaccination Rate (%)': vaccination_rate,
    'COVID Cases': [33400000, 30000000, 20000000, 10000000, 7000000],
    'COVID Deaths': [600000, 400000, 500000, 250000, 150000],
    'Recovery Rate (%)': [94, 96, 95, 97, 98]
}

covid_df = pd.DataFrame(data)

# Add derived metrics
covid_df['Cases per 100k'] = covid_df['COVID Cases'] / (covid_df['Population'] / 100000)
covid_df['Deaths per 100k'] = covid_df['COVID Deaths'] / (covid_df['Population'] / 100000)

# Save the dataset for reproducibility
covid_df.to_csv('covid19_socioeconomic_data.csv', index=False)

print("Dataset Created:\n", covid_df)

## Visualization and Analysis
import plotly.express as px

# Cases per 100k heatmap
fig_cases = px.choropleth(covid_df,
                          locations="Country",
                          locationmode="country names",
                          color="Cases per 100k",
                          title="COVID-19 Cases per 100,000 Population",
                          color_continuous_scale="Viridis")
fig_cases.show()

# GDP vs Vaccination Rate Scatter Plot
fig_gdp_vax = px.scatter(covid_df,
                         x="GDP (Billion USD)",
                         y="Vaccination Rate (%)",
                         size="Population",
                         color="Country",
                         title="GDP vs Vaccination Rate",
                         labels={"Population": "Population (Size)"},
                         hover_data=["Cases per 100k", "Deaths per 100k"])
fig_gdp_vax.show()

# ICU Beds vs Death Rate
fig_icu_deaths = px.bar(covid_df,
                        x="Country",
                        y="ICU Beds per 100k",
                        color="Deaths per 100k",
                        title="ICU Beds vs Death Rate",
                        labels={"Deaths per 100k": "Deaths per 100k Population"},
                        hover_data=["Population", "Recovery Rate (%)"])
fig_icu_deaths.show()

## Advanced Analysis: Correlation Matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Calculate correlation matrix
correlation_matrix = covid_df[[
    "Cases per 100k",
    "Deaths per 100k",
    "Vaccination Rate (%)",
    "ICU Beds per 100k",
    "GDP (Billion USD)"
]].corr()

# Plot heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", cbar=True)
plt.title("Correlation Matrix of COVID-19 Metrics")
plt.show()

# Import libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

# Load datasets
cases_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv"
deaths_url = "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv"
vaccination_url = "https://raw.githubusercontent.com/govex/COVID-19/master/data_tables/vaccine_data/global_data/time_series_covid19_vaccine_doses_admin_global.csv"

# Load datasets
cases_df = pd.read_csv(cases_url)
deaths_df = pd.read_csv(deaths_url)

# Try loading vaccination data
try:
    vaccination_df = pd.read_csv(vaccination_url)
    print("Vaccination dataset loaded successfully.")
except Exception as e:
    print(f"Could not load vaccination data: {e}")
    vaccination_df = pd.DataFrame()

# Transform cases and deaths datasets
cases_df = cases_df.melt(id_vars=["Province/State", "Country/Region", "Lat", "Long"],
                         var_name="Date",
                         value_name="Confirmed Cases")
deaths_df = deaths_df.melt(id_vars=["Province/State", "Country/Region", "Lat", "Long"],
                           var_name="Date",
                           value_name="Deaths")

# Add dummy vaccination data (fake data for demonstration purposes)
vaccination_data = {
    "Country/Region": ["USA", "India", "Brazil", "Russia", "UK"],
    "Dose 1": [300000000, 2000000000, 120000000, 100000000, 70000000],  # Doses administered
    "Dose 2": [250000000, 1500000000, 90000000, 80000000, 60000000],  # Fully vaccinated
    "Population": [331000000, 1380000000, 213000000, 146000000, 68000000]
}

vaccination_df = pd.DataFrame(vaccination_data)

# Merge datasets
covid_data = pd.merge(cases_df, deaths_df, on=["Province/State", "Country/Region", "Lat", "Long", "Date"], how="outer")
covid_data = pd.merge(covid_data, vaccination_df, on="Country/Region", how="left")

# Add derived metrics
covid_data["Cases per 100k"] = covid_data["Confirmed Cases"] / (covid_data["Population"] / 100000)
covid_data["Deaths per 100k"] = covid_data["Deaths"] / (covid_data["Population"] / 100000)
covid_data["Hospital Bed Utilization Rate (%)"] = (covid_data["Confirmed Cases"] /
                                                  (covid_data["Population"] / 100000)) * 100

# Vaccination Rate Calculation
covid_data["Vaccination Rate (%)"] = covid_data["Dose 2"] / covid_data["Population"] * 100

# Map countries to continents (Manually defined or from a reliable source)
continent_map = {
    "USA": "North America", "India": "Asia", "Brazil": "South America", "Russia": "Europe", "UK": "Europe"
}

# Add a column for Continent
covid_data["Continent"] = covid_data["Country/Region"].map(continent_map)

# Group data by continent
continent_data = covid_data.groupby("Continent").agg({
    "Confirmed Cases": "sum",
    "Deaths": "sum",
    "Dose 2": "sum",
    "Population": "sum"
}).reset_index()

# Calculate derived metrics at the continent level
continent_data["Cases per 100k"] = continent_data["Confirmed Cases"] / (continent_data["Population"] / 100000)
continent_data["Deaths per 100k"] = continent_data["Deaths"] / (continent_data["Population"] / 100000)
continent_data["Vaccination Rate (%)"] = continent_data["Dose 2"] / continent_data["Population"] * 100

# Visualization Example 1: Bar chart of total cases by continent
plt.figure(figsize=(10, 6))
sns.barplot(x="Continent", y="Confirmed Cases", data=continent_data)
plt.title("Total COVID-19 Cases by Continent")
plt.tight_layout()
plt.show()

# Visualization Example 2: Bar chart of total deaths by continent
plt.figure(figsize=(10, 6))
sns.barplot(x="Continent", y="Deaths", data=continent_data)
plt.title("Total Deaths by Continent")
plt.tight_layout()
plt.show()

# Visualization Example 3: Bar chart of vaccination rate by continent
plt.figure(figsize=(10, 6))
sns.barplot(x="Continent", y="Vaccination Rate (%)", data=continent_data)
plt.title("Vaccination Rate by Continent")
plt.tight_layout()
plt.show()

# Visualization Example 4: COVID-19 Cases per 100k by Continent
plt.figure(figsize=(10, 6))
sns.barplot(x="Continent", y="Cases per 100k", data=continent_data)
plt.title("COVID-19 Cases per 100k by Continent")
plt.tight_layout()
plt.show()

# Visualization Example 5: Correlation Heatmap of Continent-level metrics
plt.figure(figsize=(10, 6))
sns.heatmap(continent_data[["Cases per 100k", "Deaths per 100k", "Vaccination Rate (%)"]].corr(), annot=True, cmap="coolwarm")
plt.title("Correlation Matrix of Continent-level Metrics")
plt.show()

# Save the enriched continent-level dataset
continent_data.to_csv("continent_level_covid19_data.csv", index=False)

print("Dataset processing complete. Visualizing data...")